// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String     @id @default(uuid())
  email     String     @unique
  name      String
  role      Role       @default(user)
  phone     String?
  password  String
  cards     CardData[] @relation("CardToUser")
  createdAt DateTime   @default(now())

  vehicles Vehicle[]
  bookings Booking[]
  sessions ParkingSession[]
}

model Vehicle {
  id           String           @id @default(uuid())
  userId       String
  licensePlate String           @unique
  make         String
  model        String
  color        String
  year         Int?
  vehicleType  VehicleType      @default(car)
  isActive     Boolean          @default(true)
  rfidCard     String?          @unique
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @default(now()) @updatedAt
  Parkingspot  ParkingSpot?
  user         User             @relation(fields: [userId], references: [id])
  bookings     Booking[]
  sessions     ParkingSession[]

  @@map("vehicles") //ADD
}

enum VehicleType {
  car
  motorcycle
  truck
  van
  suv
}

model ParkingLot {
  id             String @id @default(uuid())
  name           String
  address        String
  totalSpots     Int
  availableSpots Int
  hourlyRate     Float
  managerId      String

  manager  manager?         @relation("ManagerLots", fields: [managerId], references: [id])
  spots    ParkingSpot[]
  bookings Booking[]
  sessions ParkingSession[]
}

model ParkingSpot {
  id          String           @id @default(uuid())
  lotId       String
  spotNumber  String
  isAvailable Boolean          @default(true)
  isReserved  Boolean          @default(false)
  vehicleId   String?          @unique
  lot         ParkingLot       @relation(fields: [lotId], references: [id])
  vehicle     Vehicle?         @relation(fields: [vehicleId], references: [id])
  bookings    Booking[]
  sessions    ParkingSession[]
}

model Booking {
  id            String        @id @default(uuid())
  userId        String
  lotId         String
  spotId        String
  vehicleId     String
  startTime     DateTime
  endTime       DateTime
  status        BookingStatus
  totalAmount   Float?
  paymentstatus status

  user    User        @relation(fields: [userId], references: [id])
  lot     ParkingLot  @relation(fields: [lotId], references: [id])
  spot    ParkingSpot @relation(fields: [spotId], references: [id])
  vehicle Vehicle     @relation(fields: [vehicleId], references: [id])
}

model ParkingSession {
  id           String        @id @default(uuid())
  userId       String
  vehicleId    String
  lotId        String
  spotId       String
  checkInTime  DateTime
  checkOutTime DateTime?
  duration     Int?
  amount       Float?
  status       SessionStatus

  user    User        @relation(fields: [userId], references: [id])
  vehicle Vehicle     @relation(fields: [vehicleId], references: [id])
  lot     ParkingLot  @relation(fields: [lotId], references: [id])
  spot    ParkingSpot @relation(fields: [spotId], references: [id])
}

model Payment {
  paymentId String @id @default(uuid())
  sessionId String
  amount    String
  method    String
  status    status
  timestamp String
}

model CardData {
  CardId       String @id
  Balance      String
  rfidno       String @unique
  cardholder   String
  Parking_time String
  User         User   @relation("CardToUser", fields: [cardholder], references: [id])
}

enum Role {
  user
  manager
  ADMIN
}

enum BookingStatus {
  booked
  active
  completed
  cancelled
}

enum SessionStatus {
  active
  completed
}

enum status {
  completed
  pending
  cancelled
}

model admin {
  id       String @id @default(uuid())
  username String
  email    String @unique
  password String
  role     Role   @default(ADMIN)
}

model manager {
  id          String       @id @default(uuid())
  username    String
  email       String       @unique
  phone       String       @unique
  password    String
  role        Role         @default(manager)
  managedLots ParkingLot[] @relation("ManagerLots")
}

model licensePlate{
  id String @id @default(uuid())
  plate String @unique
  createdAt DateTime @default(now())
}